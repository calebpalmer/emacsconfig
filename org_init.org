* init
  #+begin_src emacs-lisp

    ;; move custom-set-variables and custom-set-faces into another file
    (setq custom-file (concat user-emacs-directory "/custom.el"))
    (load-file custom-file)


    (yas-global-mode)
    (add-hook 'yas-minor-mode-hook (lambda () (yas-activate-extra-mode 'fundamental-mode)))

    ;; store all backup and autosave files in the tmp dir
    (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))

    ;; packages
    (require 'use-package)

    (add-to-list 'load-path "~/.emacs.d/thirdpartyscripts")

  #+end_src

  #+RESULTS:
  | ~/.emacs.d/thirdpartyscripts | /home/caleb/.emacs.d/elpa/all-the-icons-20210119.2136 | /home/caleb/.emacs.d/elpa/auto-package-update-20200826.2227 | /home/caleb/.emacs.d/elpa/blacken-20200626.2018 | /home/caleb/.emacs.d/elpa/ccls-20200820.308 | /home/caleb/.emacs.d/elpa/clang-format+-20190824.2216 | /home/caleb/.emacs.d/elpa/clang-format-20191121.1708 | /home/caleb/.emacs.d/elpa/company-lsp-20190612.1553 | /home/caleb/.emacs.d/elpa/cquery-20190118.542 | /home/caleb/.emacs.d/elpa/docker-20200610.715 | /home/caleb/.emacs.d/elpa/docker-compose-mode-20200830.1336 | /home/caleb/.emacs.d/elpa/docker-tramp-20170207.325 | /home/caleb/.emacs.d/elpa/dockerfile-mode-20210106.235 | /home/caleb/.emacs.d/elpa/doom-themes-20201220.836 | /home/caleb/.emacs.d/elpa/dracula-theme-20201120.758 | /home/caleb/.emacs.d/elpa/elpy-20201115.1811 | /home/caleb/.emacs.d/elpa/company-20210122.2314 | /home/caleb/.emacs.d/elpa/elpygen-20171225.1736 | /home/caleb/.emacs.d/elpa/emmet-mode-20180613.341 | /home/caleb/.emacs.d/elpa/eyebrowse-20201107.955 | /home/caleb/.emacs.d/elpa/go-mode-20201204.1652 | /home/caleb/.emacs.d/elpa/helm-lsp-20200910.518 | /home/caleb/.emacs.d/elpa/helm-projectile-20201217.908 | /home/caleb/.emacs.d/elpa/helm-20210121.2112 | /home/caleb/.emacs.d/elpa/helm-core-20210120.757 | /home/caleb/.emacs.d/elpa/async-20210117.718 | /home/caleb/.emacs.d/elpa/highlight-indentation-20201110.1327 | /home/caleb/.emacs.d/elpa/hyperbole-7.1.3 | /home/caleb/.emacs.d/elpa/json-mode-20190123.422 | /home/caleb/.emacs.d/elpa/json-reformat-20160212.853 | /home/caleb/.emacs.d/elpa/json-snatcher-20200916.1717 | /home/caleb/.emacs.d/elpa/lsp-treemacs-20201230.2214 | /home/caleb/.emacs.d/elpa/lsp-ui-20210121.1429 | /home/caleb/.emacs.d/elpa/lsp-mode-20210122.947 | /home/caleb/.emacs.d/elpa/dash-functional-20210103.1524 | /home/caleb/.emacs.d/elpa/magit-20210123.446 | /home/caleb/.emacs.d/elpa/git-commit-20210115.2345 | /home/caleb/.emacs.d/elpa/markdown-mode-20210123.1547 | /home/caleb/.emacs.d/elpa/neotree-20200324.1946 | /home/caleb/.emacs.d/elpa/org-attach-screenshot-20201130.1607 | /home/caleb/.emacs.d/elpa/popup-20210108.1821 | /home/caleb/.emacs.d/elpa/popwin-20200908.816 | /home/caleb/.emacs.d/elpa/pyvenv-20201227.1623 | /home/caleb/.emacs.d/elpa/realgud-20201221.1435 | /home/caleb/.emacs.d/elpa/loc-changes-20200722.1111 | /home/caleb/.emacs.d/elpa/load-relative-20201130.2202 | /home/caleb/.emacs.d/elpa/restclient-20200901.1442 | /home/caleb/.emacs.d/elpa/smart-mode-line-20190527.1156 | /home/caleb/.emacs.d/elpa/rich-minority-20190419.1136 | /home/caleb/.emacs.d/elpa/spacemacs-theme-20210206.1428 | /home/caleb/.emacs.d/elpa/spinner-1.7.3 | /home/caleb/.emacs.d/elpa/tablist-20200427.2205 | /home/caleb/.emacs.d/elpa/test-simple-20200722.1121 | /home/caleb/.emacs.d/elpa/tide-20210105.812 | /home/caleb/.emacs.d/elpa/flycheck-20201228.2104 | /home/caleb/.emacs.d/elpa/transient-20210117.2008 | /home/caleb/.emacs.d/elpa/treemacs-projectile-20210107.1251 | /home/caleb/.emacs.d/elpa/treemacs-20210118.1552 | /home/caleb/.emacs.d/elpa/cfrs-20210121.2007 | /home/caleb/.emacs.d/elpa/posframe-20210118.42 | /home/caleb/.emacs.d/elpa/ht-20210119.741 | /home/caleb/.emacs.d/elpa/hydra-20201115.1055 | /home/caleb/.emacs.d/elpa/lv-20200507.1518 | /home/caleb/.emacs.d/elpa/pfuture-20200425.1357 | /home/caleb/.emacs.d/elpa/ace-window-20200606.1259 | /home/caleb/.emacs.d/elpa/avy-20201226.1734 | /home/caleb/.emacs.d/elpa/f-20191110.1357 | /home/caleb/.emacs.d/elpa/s-20180406.808 | /home/caleb/.emacs.d/elpa/dash-20210123.1222 | /home/caleb/.emacs.d/elpa/projectile-20210117.1224 | /home/caleb/.emacs.d/elpa/pkg-info-20150517.1143 | /home/caleb/.emacs.d/elpa/epl-20180205.2049 | /home/caleb/.emacs.d/elpa/typescript-mode-20201002.1109 | /home/caleb/.emacs.d/elpa/use-package-20210106.2145 | /home/caleb/.emacs.d/elpa/bind-key-20200805.1727 | /home/caleb/.emacs.d/elpa/web-beautify-20161115.2247 | /home/caleb/.emacs.d/elpa/web-mode-20201227.1048 | /home/caleb/.emacs.d/elpa/which-key-20201216.1720 | /home/caleb/.emacs.d/elpa/with-editor-20210117.2008 | /home/caleb/.emacs.d/elpa/yaml-mode-20201109.1026 | /home/caleb/.emacs.d/elpa/yasnippet-snippets-20210105.1346 | /home/caleb/.emacs.d/elpa/yasnippet-20200604.246 | /etc/emacs | /usr/local/share/emacs/26.3/site-lisp | /usr/local/share/emacs/site-lisp | /usr/share/emacs/site-lisp/dictionaries-common | /usr/share/emacs/site-lisp/cmake-data | /usr/share/emacs/site-lisp/autoconf | /usr/share/emacs/26.3/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/site-lisp/autoconf | /usr/share/emacs/site-lisp/clang-format | /usr/share/emacs/site-lisp/clang-format-10 | /usr/share/emacs/site-lisp/llvm-10 | /usr/share/emacs/site-lisp/llvm-9 | /usr/share/emacs/26.3/lisp | /usr/share/emacs/26.3/lisp/vc | /usr/share/emacs/26.3/lisp/url | /usr/share/emacs/26.3/lisp/textmodes | /usr/share/emacs/26.3/lisp/progmodes | /usr/share/emacs/26.3/lisp/play | /usr/share/emacs/26.3/lisp/org | /usr/share/emacs/26.3/lisp/nxml | /usr/share/emacs/26.3/lisp/net | /usr/share/emacs/26.3/lisp/mh-e | /usr/share/emacs/26.3/lisp/mail | /usr/share/emacs/26.3/lisp/leim | /usr/share/emacs/26.3/lisp/language | /usr/share/emacs/26.3/lisp/international | /usr/share/emacs/26.3/lisp/image | /usr/share/emacs/26.3/lisp/gnus | /usr/share/emacs/26.3/lisp/eshell | /usr/share/emacs/26.3/lisp/erc | /usr/share/emacs/26.3/lisp/emulation | /usr/share/emacs/26.3/lisp/emacs-lisp | /usr/share/emacs/26.3/lisp/cedet | /usr/share/emacs/26.3/lisp/calendar | /usr/share/emacs/26.3/lisp/calc | /usr/share/emacs/26.3/lisp/obsolete |

* org
#+begin_src emacs-lisp
  (use-package org
    :config)

  (use-package org-attach-screenshot
    :ensure t)
#+end_src

#+RESULTS:

* lsp
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :custom
      (lsp-clients-clangd-executable "/usr/bin/clangd-10" "Set clang executable")
      :config
      (setq lsp-prefer-flymake nil)
      (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
      (add-hook 'c++-mode-hook 'lsp)
      (add-hook 'c-mode-hook 'lsp))

    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-doc-enable t)
      (setq lsp-ui-doc-delay 0.2)
      (setq lsp-ui-doc-position 'top)
      (setq lsp-ui-doc-use-webkit t)
      (setq lsp-ui-imenu-auto-refresh t)
      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

    (use-package company-lsp
      :ensure t)
  #+end_src

  #+RESULTS:

* look and feel
  #+begin_src emacs-lisp
    (load-theme 'spacemacs-dark)

    (use-package doom-themes
      :ensure t
      :config
      (load-theme 'doom-one)
      ;;(doom-themes-neotree-config) ;; loads doom theme for the file tree Neotree
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      ;; Enable all-the-icons beautiful icons for the Neotree doom theme
      ;;(setq doom-neotree-enable-file-icons t)
      ;;(setq doom-neotree-enable-folder-icons t)
      ;;(setq doom-neotree-enable-chevron-icons t)
      ;; Enables different colors for different file types for the Neotree doom theme
      ;;(setq doom-neotree-enable-type-colors t)
      )

    (add-hook 'after-init-hook 'global-hl-line-mode)
    ;; Highlight corresponding parentheses when cursor is on one
    (setq show-paren-delay 0) ;; shows matching parenthesis asap
    (show-paren-mode t)

    ;; Proper line wrapping
    (global-visual-line-mode t)

    ;; disable toolbar
    (tool-bar-mode -1)
    (set-default 'truncate-lines t)


    ;; scroll settings
    (setq scroll-preserve-screen-position 1)
    (setq scroll-step            1
	  scroll-conservatively  10000)

    ;; zoom
    (load "zoom-frm.el")
    (global-set-key (kbd "C-x C-=") 'zoom-in)
    (global-set-key (kbd "C-x C--") 'zoom-out)

    ;; Adds Nice Icons to Emacs so that other themes can use them (required for Doom theme below)
    ;; run M-x all-the-icons-install-fonts RET to install the fonts
    (use-package all-the-icons
      :ensure t)

    (use-package smart-mode-line
      :ensure t
      :config
      ;; Smart-mode-line makes the mode-line better to read
      ;; first remove annoying message at startup that
      ;; asks if you want to run the theme lisp code
      (setq sml/no-confirm-load-theme t)
      ;; load smart-mode-line
      ;; (setq sml/theme 'dark) ;; changes the theme to dark
      (sml/setup) ;; automatically figures out a theme if none is specified
      )

    (use-package ace-window
      :ensure t
      :bind
      (("M-S-o" . 'ace-window)
       ("M-o" . 'ace-window))
      :custom
      (aw-scope 'frame "Only consider the current frame."))

    (use-package eyebrowse
      :ensure t
      :diminish eyebrowse-mode
      :config (progn
		(define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
		(define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
		(define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
		(define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
		(define-key eyebrowse-mode-map (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
		(define-key eyebrowse-mode-map (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
		(define-key eyebrowse-mode-map (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
		(define-key eyebrowse-mode-map (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
		(eyebrowse-mode t)
		(setq eyebrowse-new-workspace t)))

    (put 'narrow-to-region 'disabled nil)

    (use-package treemacs
      :ensure t
      :bind (("<f8>" . 'treemacs))
      :config
      (progn
	(setq treemacs-width 60)
	(treemacs-follow-mode nil)
	(treemacs-filewatch-mode t)
	)
      )

    (use-package treemacs-projectile
      :ensure t)

    (use-package popwin
      :ensure t)

  #+end_src

  #+RESULTS:

* whitespace
  #+begin_src emacs-lisp
;; Show trailing white spaces
(setq-default show-trailing-whitespace nil)

;; Remove useless whitespace before saving a file
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))

  #+end_src

  #+RESULTS:
  | (lambda nil (delete-trailing-whitespace)) | whitespace-cleanup |

* keybindings
  #+begin_src emacs-lisp
    ;; global key bindings
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "M-p") 'switch-to-buffer)

  #+end_src

  #+RESULTS:
  : switch-to-buffer

* helm
  #+begin_src emacs-lisp
     (use-package helm
       :ensure t
       :bind
       (("C-x C-f" . 'helm-find-files)
	("M-O" . 'helm-occur)
	("M-x" . 'helm-M-x)
	)
       :config
       (require 'helm-config)
       (helm-mode 1)
       ;; Make helm show on bottom always.
       (add-to-list 'display-buffer-alist
		    `(,(rx bos "*helm" (* not-newline) "*" eos)
		      (display-buffer-in-side-window)
		      (inhibit-same-window . t)
		      (window-height . 0.4))))

     (use-package helm-swoop
       :bind (("M-S" . 'helm-swoop)))
  #+end_src

  #+RESULTS:
  : helm-swoop

* projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :custom
      (projectile-switch-project-action 'projectile-commander)
      (projectile-current-project-on-switch 'keep)
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
      (add-to-list 'projectile-globally-ignored-directories "debugbuild")
      (add-to-list 'projectile-globally-ignored-directories "builds")
      (projectile-mode +1))

    (use-package helm-projectile
      :ensure t
      :config
      (helm-projectile-on))
  #+end_src

  #+RESULTS:
  : t

* company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-tooltip-align-annotations t
	  company-minimum-prefix-length 1
	  company-idle-delay 0.2)
    (global-company-mode)
    (with-eval-after-load "company"
      (define-key company-active-map (kbd "C-p") #'company-select-previous-or-abort)
      (define-key company-active-map (kbd "C-n") #'company-select-next-or-abort))
    )
#+end_src

#+RESULTS:
: t

* magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :bind
      (("C-x g" . 'magit-status))
      :config
      (setq magit-diff-refine-hunk (quote all))
      (setq magit-display-buffer-function
	    (lambda (buffer)
	      (display-buffer
	       buffer
	       (cond ((and (derived-mode-p 'magit-mode)
			   (eq (with-current-buffer buffer major-mode)
			       'magit-status-mode))
		      nil)
		     ((memq (with-current-buffer buffer major-mode)
			    '(magit-process-mode
			      magit-revision-mode
			      magit-diff-mode
			      magit-stash-mode))
		      nil)
		     (t
		      '(display-buffer-same-window)))))))
  #+end_src

  #+RESULTS:
  : magit-status

* yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets
    :ensure t)
#+end_src

#+RESULTS:

* python
  #+begin_src emacs-lisp
    ;; (use-package elpy
    ;;   :ensure t
    ;;   :custom
    ;;   ((elpy-rpc-python-command "python3" "The python command"))
    ;;   :config
    ;;   (elpy-enable)
    ;;   (add-hook 'elpy-mode-hook (lambda ()
    ;;			      (add-hook 'before-save-hook
    ;;					'elpy-black-fix-code nil t))))

    (defun my-python-mode-hook ()
      (lsp)
      )

    (add-hook 'python-mode-hook 'my-python-mode-hook)

    (use-package pyvenv
      :ensure t
      :config
      (pyvenv-mode 1))
  #+end_src

  #+RESULTS:
  : t

* c/c++
#+begin_src emacs-lisp
  (use-package clang-format+
    :ensure t
    :config
    (add-hook 'c-mode-common-hook #'clang-format+-mode))

  (defun cap/c++-mode-hook ()
    (local-set-key (kbd "<f12>") 'compile)
    (local-set-key (kbd "<f9>") 'ff-find-other-file)
    (setq tab-width 4)
    (linum-mode t)
    ;; (lsp)
    )

  (add-hook 'c++-mode-hook 'cap/c++-mode-hook)
  (add-hook 'c-mode-hook 'cap/c++-mode-hook)
  (add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
#+end_src


** c style
   #+begin_src emacs-lisp
    ;; cc style

    ;; This was created by using c-guess-no-install and then c-guess-view
    ;; https://stackoverflow.com/a/39907217
    (c-add-style "my-cc-style"
		 '("linux"
		   (c-basic-offset . 4)	; Guessed value
		   (c-offsets-alist
		    (arglist-cont . 0)	; Guessed value
		    (arglist-intro . ++)	; Guessed value
		    (defun-block-intro . +)	; Guessed value
		    (defun-close . 0)	; Guessed value
		    (defun-open . 0)	; Guessed value
		    (innamespace . 0)	; Guessed value
		    (namespace-close . 0)	; Guessed value
		    (namespace-open . 0)	; Guessed value
		    (topmost-intro . 0)	; Guessed value
		    (topmost-intro-cont . ++) ; Guessed value
		    (access-label . -)
		    (annotation-top-cont . 0)
		    (annotation-var-cont . +)
		    (arglist-close . c-lineup-close-paren)
		    (arglist-cont-nonempty . c-lineup-arglist)
		    (block-close . 0)
		    (block-open . 0)
		    (brace-entry-open . 0)
		    (brace-list-close . 0)
		    (brace-list-entry . c-lineup-under-anchor)
		    (brace-list-intro . +)
		    (brace-list-open . 0)
		    (c . c-lineup-C-comments)
		    (case-label . 0)
		    (catch-clause . 0)
		    (class-close . 0)
		    (class-open . 0)
		    (comment-intro . c-lineup-comment)
		    (composition-close . 0)
		    (composition-open . 0)
		    (cpp-define-intro c-lineup-cpp-define +)
		    (cpp-macro . -1000)
		    (cpp-macro-cont . +)
		    (do-while-closure . 0)
		    (else-clause . 0)
		    (extern-lang-close . 0)
		    (extern-lang-open . 0)
		    (friend . 0)
		    (func-decl-cont . +)
		    (inclass . +)
		    (incomposition . +)
		    (inexpr-class . +)
		    (inexpr-statement . +)
		    (inextern-lang . +)
		    (inher-cont . c-lineup-multi-inher)
		    (inher-intro . +)
		    (inlambda . c-lineup-inexpr-block)
		    (inline-close . 0)
		    (inline-open . +)
		    (inmodule . +)
		    (knr-argdecl . 0)
		    (knr-argdecl-intro . 0)
		    (label . 0)
		    (lambda-intro-cont . +)
		    (member-init-cont . c-lineup-multi-inher)
		    (member-init-intro . +)
		    (module-close . 0)
		    (module-open . 0)
		    (objc-method-args-cont . c-lineup-ObjC-method-args)
		    (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
		    (objc-method-intro .
				       [0])
		    (statement . 0)
		    (statement-block-intro . +)
		    (statement-case-intro . +)
		    (statement-case-open . 0)
		    (statement-cont . +)
		    (stream-op . c-lineup-streamop)
		    (string . -1000)
		    (substatement . +)
		    (substatement-label . 0)
		    (substatement-open . 0)
		    (template-args-cont c-lineup-template-args +))))

    (setq c-default-style "my-cc-style")

   #+end_src

   #+RESULTS:
   : my-cc-style

* go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
    (add-hook 'go-mode-hook (lambda ()
			      (lsp-deferred))))

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src

#+RESULTS:
| lsp-go-install-save-hooks | (lambda nil (lsp-deferred)) |

* rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :config
    (add-hook 'rust-mode-hook
	      (lambda () (progn
			   (setq indent-tabs-mode nil)
			   (lsp))))
    (setq rust-format-on-save t))
#+end_src

#+RESULTS:
| use-package | Cannot load rust-mode | :error | nil |

* web
#+begin_src emacs-lisp
    (use-package tide
      :ensure t
      :config
      (add-hook 'before-save-hook 'tide-format-before-save)
      (add-hook 'typescript-mode-hook
		(lambda ()
		     (tide-setup)
		     (flycheck-mode +1)
		     (setq flycheck-check-syntax-automatically '(save mode-enabled))
		     (eldoc-mode +1)
		     (tide-hl-identifier-mode +1)
		     ;; company is an optional dependency. You have to
		     ;; install it separately via package-install
		     ;; `M-x package-install [ret] company`
		     (company-mode +1))
		))

    (use-package typescript-mode
      :ensure t
    )

    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      )

    ;; sudo npm install -g js-beautify
    (use-package web-beautify
      :ensure t
      :config
      (eval-after-load 'js2-mode
	'(add-hook 'js2-mode-hook
		   (lambda ()
		     (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))
      ;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
      (eval-after-load 'js
	'(add-hook 'js-mode-hook
		   (lambda ()
		     (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

      (eval-after-load 'json-mode
	'(add-hook 'json-mode-hook
		   (lambda ()
		     (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))
      (eval-after-load 'web-mode
	'(add-hook 'web-mode-hook
		   (lambda ()
		     (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))
      (eval-after-load 'css-mode
	'(add-hook 'css-mode-hook
		   (lambda ()
		     (add-hook 'before-save-hook 'web-beautify-css-buffer t t))))

      (eval-after-load 'sgml-mode
	'(add-hook 'html-mode-hook
		   (lambda ()
		     (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))
      )

    (use-package emmet-mode
      :ensure t
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode)
      (add-hook 'web-mode-hook 'emmet-mode))

    (use-package restclient
      :ensure t)
#+end_src

#+RESULTS:

* docker
#+begin_src emacs-lisp
  (use-package docker
    :ensure t)

  (use-package dockerfile-mode
    :ensure t)

  (use-package docker-compose-mode
    :ensure t)
#+end_src

#+RESULTS:

* yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

#+RESULTS:
: t

* non package scripts
#+begin_src emacs-lisp
  ;; non package scripts
  (load "gendoxy.el")
#+end_src

#+RESULTS:
: t

* my scripts
  #+begin_src emacs-lisp
    (load-file (concat user-emacs-directory "/myscripts/my-projectile.el"))
  #+end_src

  #+RESULTS:
  : t
